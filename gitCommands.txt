*git init
 this command initialises a folder into local git repository.
*git status
 this shows all the files present in staging area
*git add file.name
 this adds this particular file into stagging area. 
*git add .(// here . is a argument not to confuse with full stop)
 this adds all files in a folder into stagging area.
*git commit -m "Commit message in present tense"
 this commits all the files present in stagging area
*git log
 this shows all commits
*git diff file.name
 this shows any untracked modification done to that file and tries to show the differences
*git checkout file.name
 this roll backs to previous version(tracked version) of the file
*git remote add origin url/of/newly/created/repository
 this adds the url of remote repository to this folder so in future you can easily push all files here. here the url can be
 https://github.com/vishwa-s-a/Story.git like this
*git push -u origin master
 this command pushes all files to selected remote repository. here origin is new repository name and master is branch name
*git rm --cached file_name.txt
 this command removes this file from staging area and keeps it in untracked section
*git rm --cached -r .
 this command  removes all files present in staging area 
*in .gitignore file '#' is used for commenting things out
*git clone https_link_of_repository
 this command clones the specified repo at this location
*git branch new_branch_name
 example: git branch alienPlot
 this creates a branch as specified. like in example it is alienPlot
*git branch
 this shows all branches present in this project
*git checkout alienPlot
 this switches to branch named as alienPlot
* (origin/master) represents master branch of online repo, here origin is the name of online repo or github repo
* (HEAD -> master) represents master branch of local repo
* when we are happy with changes made in other branch and want to merge then we should go to master branch first then follow this commands
*git merge alienPlot   here alienPlot is name of the branch which we want to merge to master
 then it opens up vim editor and there if needed give a message for  this merge and to quit the vim use this :q! to quit the vim editor
 if vim is not there then it opens up merge commit message file in nano, there give the suitable message why this merge is necessary by using space,enter.
* to see all commits in online repo go to insights>> network , here you can see all commit and the changes made in that commit
***************concepts of forking and pull requests*********************
* anyone on internet can fork anyones public repo, forking basically means you are taking someones repo into your accounts repo and from their you can clone it into your
  local machine make any changes and commit it into your accounts forked repo.
* if you find that the commit made into your forked repo are useful then you can send pull request to the actual owner of the repo, so he will audit the code and see the 
  usefullness of the code and accepts the pull request if needed and merges your modified repo into his, by this way you can help to contribute to open source
